buildscript {
    repositories {
        //temporarily turn off https by default (see http://bit.ly/YUdmRK)
        //mavenCentral()
        //fallback:
        maven {
            url = "http://repo1.maven.org/maven2/"
        }
    }
}

apply plugin: 'com.android.application'

dependencies {
    compile 'agency.tango.android:material-intro-screen:0.0.5'
    compile 'com.android.support:support-v13:25.0.1'
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.crittercism:crittercism-android-agent:5.5.5'
    compile files('libs/FlurryAnalytics-6.0.0.jar')
    compile files('libs/volley-1.0.15.jar')
    compile 'com.toptoche.searchablespinner:searchablespinnerlibrary:1.3.1'
    compile 'com.rengwuxian.materialedittext:library:2.1.4'
    compile 'com.jakewharton:butterknife:8.7.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    testCompile 'junit:junit:4.12'
}

android {
    compileSdkVersion 26
    buildToolsVersion '25.0.3'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26

        ndk {
           moduleName "refer_express_library"
        }
    }
    signingConfigs {
        dev {
            storeFile file("./keystores/dev_build_keystore")
            storePassword "quickenloans"
            keyAlias "quickenloans"
            keyPassword "quickenloans"
        }
        debugWithDummyData { //only difference is that the fields are filled with dummy data.
            storeFile file("./keystores/dev_build_keystore")
            storePassword "quickenloans"
            keyAlias "quickenloans"
            keyPassword "quickenloans"
        }
        prod {
            storeFile file("./keystores/prod_build_keystore")
            storePassword "quickenloans"
            keyAlias "quickenloans"
            keyPassword "quickenloans"
        }
        lintOptions {
            abortOnError true
        }
    }
    buildTypes {
        release {
            debuggable true
        }

        debug {
            debuggable true
        }
        dev {
            debuggable true
            signingConfig signingConfigs.dev
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debugWithDummyData {
            signingConfig signingConfigs.dev
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        prod {
            signingConfig signingConfigs.prod
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    applicationVariants.all {
        variant ->
            variant.outputs.each { output ->
                def file = output.outputFile
                if (file != null && file.name.endsWith(".apk")) {
                    if (file.name.contains("dev")) {
                        output.outputFile = new File(file.parent, "ReferExpress_devbuild.apk")
                    } else if (file.name.contains("prod")) {
                        output.outputFile = new File(file.parent, "ReferExpress_prodbuild.apk")
                    }
                }
            }
    }



//    task copyNativeLibs(type: Copy, dependsOn: 'buildNative') {
//        dependsOn 'buildNative'
//        from 'libs'
//        into 'build/native-libs'
//        include '**/*.so'
//    }
//
//    tasks.withType(Compile) { compileTask -> compileTask.dependsOn copyNativeLibs }
//
//    clean.dependsOn 'cleanCopyNativeLibs'
//
//    tasks.withType(com.android.build.gradle.tasks.PackageApplication) {
//        pkgTask ->
//            pkgTask.jniFolders = new HashSet<File>()
//            pkgTask.jniFolders.add(new File(buildDir, 'native-libs'))
//    }
//
//
//    task buildNative(type: Exec) {
//
//        if (System.env.ANDROID_NDK_HOME != null) {
//            def ndkBuild = new File(System.env.ANDROID_NDK_HOME, 'ndk-build')
//            commandLine ndkBuild
//        } else {
//            doLast {
//                println '##################'
//                println 'Skipping NDK build'
//                println 'Reason: ANDROID_NDK_HOME not set.'
//                println '##################'
//            }
//        }
//    }
}